service: nestjs-serverless-poc
frameworkVersion: '3'
useDotenv: true

plugins:
  - serverless-deployment-bucket
  - serverless-offline

provider:
  name: aws
  runtime: nodejs14.x
  architecture: arm64
  region: eu-west-1
  lambdaHashingVersion: '20201221'
  profile: ${env:AWS_PROFILE}
  memorySize: 1024
  timeout: 20
  versionFunctions: false
  ecr:
    images:
      appimage:
        path: ./
  vpc:
    securityGroupIds:
      - ${env:SECURITY_GROUP_ID}
    subnetIds:
      - ${env:SUBNET_PRIVATE_A_ID}
      - ${env:SUBNET_PRIVATE_B_ID}
      - ${env:SUBNET_DATABASE_A_ID}
      - ${env:SUBNET_DATABASE_B_ID}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action: "*"
          Resource: "*"
  deploymentBucket:
    name: ${self:service}-sls-state-${sls:stage}
  environment:
      STAGE: ${sls:stage}
      NODE_ENV: ${env:NODE_ENV}
      COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
      COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
      COGNITO_REGION: ${env:COGNITO_REGION}
      DEFAULT_FROM_MAIL: ${env:DEFAULT_FROM_MAIL}
      DESTINATION_EMAIL_TEST: ${env:DESTINATION_EMAIL_TEST}
      POSTGRES_HOST: ${env:POSTGRES_HOST}
      POSTGRES_PORT: ${env:POSTGRES_PORT}
      POSTGRES_DATABASE: ${env:POSTGRES_DATABASE}
      POSTGRES_USER: ${env:POSTGRES_USER}
      POSTGRES_PASSWORD: ${env:POSTGRES_PASSWORD}

custom:
  serverless-offline:
    noPrependStageInUrl: true
  deploymentBucket:
    accelerate: true
    blockPublicAccess: true

functions:
  main:
    handler: dist/src/main-http-lambda.handler
#    image:
#      name: appimage
#      command:
#        - dist/src/main-http-lambda.handler
    events:
      - httpApi:
          method: '*'
          path: /
      - httpApi:
          method: '*'
          path: /{proxy+}

resources:
  Resources:
    BackendQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-EmailQueue-${sls:stage}
