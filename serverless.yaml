service: nestjs-serverless-boilerplate
frameworkVersion: '3'
useDotenv: true

plugins:
  - serverless-deployment-bucket
  # *** offline plugins ***
  - serverless-cloudside-plugin
  - serverless-offline-sqs
  - serverless-offline

provider:
  name: aws
  runtime: nodejs14.x
  architecture: arm64
  region: ${opt:region, 'eu-west-1'}
  stackTags:
    StackName: ${self:service}-${sls:stage}
  lambdaHashingVersion: '20201221'
  profile: ${env:AWS_PROFILE}
  memorySize: 1024
  timeout: 30
  versionFunctions: false
  logRetentionInDays: 14
  ecr:
    images:
      appimage:
        path: ./
  vpc:
    securityGroupIds:
      - ${env:SECURITY_GROUP_ID}
    subnetIds:
      - ${env:SUBNET_PRIVATE_A_ID}
      - ${env:SUBNET_PRIVATE_B_ID}
      - ${env:SUBNET_DATABASE_A_ID}
      - ${env:SUBNET_DATABASE_B_ID}
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action: '*'
          Resource: '*'
  deploymentBucket:
    name: ${env:DEPLOYMENT_BUCKET_PREFIX}-${sls:stage}
  environment: ${file(./serverless/provider/environment.yaml):environment}
  apiGateway:
    binaryMediaTypes:
      - '*/*'

custom:
  offlineParams:
    # IS_OFFLINE = true
    true:
      offlineDir: 'offline'
    # IS_OFFLINE = false
    false:
      offlineDir: ''
  isOffline: ${strToBool(${env:IS_OFFLINE, false})}
  offlineDir: ${self:custom.offlineParams.${self:custom.isOffline}.offlineDir}
  s3BucketName: ${self:service}-bucket-${sls:stage}
  rootDomainName: ${env:ROOT_DOMAIN_NAME}
  staticDomainName: static.${env:ROOT_DOMAIN_NAME}
  apiDomainName: api-v2.${env:ROOT_DOMAIN_NAME}
  certificateNVirginaArn: ${env:CERTIFICATE_ARN_NVIRIGNIA}
  tableName: ${self:service}-table-${sls:stage}
  emailQueueName: ${self:service}-EmailQueue-${sls:stage}
  # *** serverless-deployment-bucket config ***
  deploymentBucket:
    accelerate: true
    blockPublicAccess: true
  # *** serverless-offline config ***
  serverless-offline:
    host: 127.0.0.1
    noPrependStageInUrl: true
    noAuth: true
    printOutput: false

  # *** serverless-offline-sqs  config ***
  serverless-offline-sqs:
    autoCreate: true
    apiVersion: '2012-11-05'
    endpoint: ${env:LOCAL_BROKER_ENDPOINT, ''}
    region: ${self:provider.region}
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false

functions:
  - ${file(./serverless/functions/${self:custom.offlineDir}/api-handler.function.yaml):functions}
  - ${file(./serverless/functions/${self:custom.offlineDir}/sqs-queue-handler.function.yaml):functions}
resources:
  # route 53
  - ${file(./serverless/resources/route53/static-record.route53.yaml)}
  - ${file(./serverless/resources/route53/api-record.route53.yaml)}
  # cloudfront
  - ${file(./serverless/resources/cloudfront/origin-access-identity.cloudfront.yaml)}
  - ${file(./serverless/resources/cloudfront/service-distribution.cloudfront.yaml)}
  - ${file(./serverless/resources/cloudfront/static-distribution.cloudfront.yaml)}
  # sqs
  - ${file(./serverless/resources/sqs/email-queue.sqs.yaml)}
  # s3
  - ${file(./serverless/resources/s3/bucket.s3.yaml)}
  # dynamodb
  #- ${file(./serverless/resources/dynamodb/table.dynamodb.yaml)}
