service: nestjs-serverless-poc
frameworkVersion: '3'
useDotenv: true

plugins:
  - serverless-deployment-bucket
  # *** offline plugins ***
  - serverless-cloudside-plugin
  - serverless-offline-sqs
  - serverless-offline

provider:
  name: aws
  runtime: nodejs14.x
  architecture: arm64
  region: ${opt:region, 'eu-west-1'}
  stackTags:
    STACK_NAME: ${self:service}
  lambdaHashingVersion: '20201221'
  profile: ${env:AWS_PROFILE}
  memorySize: 1024
  timeout: 20
  versionFunctions: false
  logRetentionInDays: 14
  ecr:
    images:
      appimage:
        path: ./
  vpc:
    securityGroupIds:
      - ${env:SECURITY_GROUP_ID}
    subnetIds:
      - ${env:SUBNET_PRIVATE_A_ID}
      - ${env:SUBNET_PRIVATE_B_ID}
      - ${env:SUBNET_DATABASE_A_ID}
      - ${env:SUBNET_DATABASE_B_ID}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action: "*"
          Resource: "*"
  deploymentBucket:
    name: ${env:DEPLOYMENT_BUCKET_PREFIX}-${sls:stage}
  environment:
    ${file(./serverless/provider/environment.yaml):environment}

custom:
  config:
    isOffline: ${env:IS_OFFLINE, false}
    emailQueueName: ${self:service}-EmailQueue-${sls:stage}
  deploymentBucket:
    accelerate: true
    blockPublicAccess: true
  # *** offline plugins config ***
  serverless-offline:
    noPrependStageInUrl: true
  serverless-offline-sqs:
    autoCreate: true
    apiVersion: "2012-11-05"
    endpoint: ${env:LOCAL_BROKER_ENDPOINT, ''}
    region: ${self:provider.region}
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false

functions:
  ${file(./serverless/functions/functions${env:OFFLINE_EXT, ''}.yaml):functions}

resources:
  ${file(./serverless/resources/sqs.yaml)}
